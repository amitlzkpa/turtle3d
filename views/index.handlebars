<body>

<script type="text/javascript">


  // -----------------------------------------


  function getPointInBetweenByLen(pointA, pointB, percentage) {
      let dir = pointB.clone().sub(pointA);
      let len = dir.length();
      dir = dir.normalize().multiplyScalar(len*percentage);
      return pointA.clone().add(dir);
  }


  function getR(r) {
    return (Math.random()*r) * ((Math.random() < 0.5) ? 1 : -1);
  }


  // -----------------------------------------


  function LineTurtle(start, end) {
    let g, c;
    let m = new THREE.LineBasicMaterial({ color: 0x000000 });
    g = new THREE.Geometry();
    g.vertices.push(start, end);
      c = new THREE.Line( g, m );
      c.name = "line";
      c.start =  () => { return g.vertices[0]; }
      c.end = () => { return g.vertices[1]; }
      return c;
  }


  function BubbleLineTurtle(start, end) {
    let os = new THREE.Object3D();
    let g, c;
    let m = new THREE.LineBasicMaterial({ color: 0x000000 });
    g = new THREE.Geometry();
    let mid = getPointInBetweenByLen(start, end, 0.5);
    let d = end.distanceTo(start);
    let r = 0.2 * d;
    g.vertices.push(start, end);
      os.add(new THREE.Line( g, m ));
      os.name = "line";
      os.start =  () => { return g.vertices[0]; }
      os.end = () => { return g.vertices[1]; }
      let sphere = new THREE.Mesh( new THREE.SphereGeometry( r, 16, 16 ), new THREE.MeshBasicMaterial( {color: 0xffffff * Math.random()} ) );
      sphere.position.set(mid.x, mid.y, mid.z);
      os.add(sphere);
      return os;
  }


  function StiltedTurtle(start, end) {
    let g, c;
    let m = new THREE.LineBasicMaterial({ color: 0x000000 });
    g = new THREE.Geometry();
    let mid = getPointInBetweenByLen(start, end, 0.5);
    let d = end.distanceTo(start);
    let r = 0.3 * d;
    mid.add(new THREE.Vector3(getR(r), getR(r), getR(r)));
    g.vertices.push(start, mid, end);
      c = new THREE.Line( g, m );
      c.name = "line";
      c.start =  () => { return g.vertices[0]; }
      c.end = () => { return g.vertices[2]; }
      return c;
  }


  // -----------------------------------------


  function RuleSetLine_2D_45Turn() {
    this.run = (i, parent, turtle) =>   {
                    let r = [];
                    let c;
                      let axis = new THREE.Vector3( 1, 0, 0 );
                      let angle = Math.PI / 4;
                      let src = parent.end().clone();
                      let v1 = parent.end().clone().sub(parent.start());
                      v1.applyAxisAngle( axis, angle );
                      v1.multiplyScalar(0.5);
                      let e1 = parent.end().clone().add(v1);
                    c = new turtle(src, e1);
                      r.push(c);
                      let v2 = parent.end().clone().sub(parent.start());
                      v2.applyAxisAngle( axis, -angle );
                      v2.multiplyScalar(0.5);
                      let e2 = parent.end().clone().add(v2);
                    c = new turtle(src, e2);
                      r.push(c);
                    return r;
                  }
  }


  function RuleSetLine_3D_45Turn() {
    this.run = (i, parent, turtle) =>   {
                    let r = [];
                    let c;
                      let axis;
                      axis = new THREE.Vector3( 1, 0, 0 )
                      let angle = Math.PI / 4;
                      let src = parent.end().clone();
                      let v1 = parent.end().clone().sub(parent.start());
                      v1.applyAxisAngle( axis, angle );
                      v1.multiplyScalar(0.5);
                      let e1 = parent.end().clone().add(v1);
                    c = new turtle(src, e1);
                      r.push(c);
                      let v2 = parent.end().clone().sub(parent.start());
                      v2.applyAxisAngle( axis, -angle );
                      v2.multiplyScalar(0.5);
                      let e2 = parent.end().clone().add(v2);
                    c = new turtle(src, e2);
                      r.push(c);
                      axis = new THREE.Vector3( 0, 0, 1 );
                      let v3 = parent.end().clone().sub(parent.start());
                      v3.applyAxisAngle( axis, angle );
                      v3.multiplyScalar(0.5);
                      let e3 = parent.end().clone().add(v3);
                    c = new turtle(src, e3);
                      r.push(c);
                      let v4 = parent.end().clone().sub(parent.start());
                      v4.applyAxisAngle( axis, -angle );
                      v4.multiplyScalar(0.5);
                      let e4 = parent.end().clone().add(v4);
                    c = new turtle(src, e4);
                      r.push(c);
                    return r;
                  }
  }


  function RuleSetLine_2D_23Turn() {
    this.run = (i, parent, turtle) =>   {
                    let r = [];
                    let c;
                      let axis = new THREE.Vector3( 1, 0, 0 );
                      let angle = Math.PI / 8;
                      let src = parent.end().clone();
                      let v1 = parent.end().clone().sub(parent.start());
                      v1.applyAxisAngle( axis, angle );
                      v1.multiplyScalar(0.5);
                      let e1 = parent.end().clone().add(v1);
                    c = new turtle(src, e1);
                      r.push(c);
                      let v2 = parent.end().clone().sub(parent.start());
                      v2.applyAxisAngle( axis, -angle );
                      v2.multiplyScalar(0.5);
                      let e2 = parent.end().clone().add(v2);
                    c = new turtle(src, e2);
                      r.push(c);
                    return r;
                  }
  }


  // -----------------------------------------


</script>



  <div class="navmenu navmenu-default navmenu-fixed-left offcanvas-sm">

    <div style="padding: 8px;">

      <h2>{{ title }}</h2>
      <small>An interactive way to explore <a href="https://en.wikipedia.org/wiki/L-system" target="_blank">L-Systems</a> in 3D</small>

      <hr>
<!-- 
      <div class="rthistory-check">
        <input type="checkbox" class="rthistory-input" id="rthistory">
        <label class="form-check-label" for="rthistory">Retain History</label>
      </div>
 -->

      <p>Turtles</p>
      <div class="turtle-bounds">
        <div style="width: 100%; height: 90px;">
          <div class="draggable turtle-tags drag-drop">Straight Line</div>
          <div class="draggable turtle-tags drag-drop">Stilted Line</div>
          <div class="draggable turtle-tags drag-drop">Bubble Line</div>
        </div>
        <div id="turtle-dropzone" class="dropzone">Drag turtle here</div>
      </div>

      <br>

      <p>Rules</p>
      <div class="ruleset-bounds">
        <div style="width: 300px; height: 90px;">
          <div class="draggable ruleset-tags drag-drop"">2-45</div>
          <div class="draggable ruleset-tags drag-drop"">4-45</div>
          <div class="draggable ruleset-tags drag-drop"">2-23</div>
        </div>
        <div id="ruleset-dropzone" class="dropzone">Drag ruleset here</div>
      </div>

      <br>


      <button type="button" id="reset" class="btn btn-secondary" autocomplete="off">
        Reset
      </button>

      &nbsp;

      <button type="button" id="step" class="btn btn-primary" autocomplete="off">
        Step
      </button>

    </div>
  </div>

  <div class="container">
    <div id="app"></div>
  </div>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
  <script src="scripts/axios/dist/axios.min.js"></script>
  <script src="scripts/vanilla-router/dist/vanilla-router.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jasny-bootstrap/3.1.3/js/jasny-bootstrap.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/interactjs@1.3.4/dist/interact.min.js"></script>

  <script src="js/three.min.js"></script>
  <script src="js/OrbitControls.js"></script>

  <script src="js/init.js"></script>
  <script src="js/app.js"></script>

</body>