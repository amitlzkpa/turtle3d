{
    "_id": {
        "$oid": "5bbc00c3c3c9a21c44ac88af"
    },
    "helpers": [
        "function getPointInBetweenByLen(pointA, pointB, percentage) {\n  let dir = pointB.clone().sub(pointA);\n  let len = dir.length();\n  dir = dir.normalize().multiplyScalar(len*percentage);\n  return pointA.clone().add(dir);\n}\n\n\nfunction getR(r) {\nreturn (Math.random()*r) * ((Math.random() < 0.5) ? 1 : -1);\n}"
    ],
    "turtles": [
        "function LineTurtle(start, end) {\n    let g, c;\n    let m = new THREE.LineBasicMaterial({ color: 0x000000 });\n    g = new THREE.Geometry();\n    g.vertices.push(start, end);\n      c = new THREE.Line( g, m );\n      c.name = \"line\";\n      c.start =  () => { return g.vertices[0]; }\n      c.end = () => { return g.vertices[1]; }\n      return c;\n  }",
        "function BubbleLineTurtle(start, end) {\n    let os = new THREE.Object3D();\n    let g, c;\n    let m = new THREE.LineBasicMaterial({ color: 0x000000 });\n    g = new THREE.Geometry();\n    let mid = getPointInBetweenByLen(start, end, 0.5);\n    let d = end.distanceTo(start);\n    let r = 0.2 * d;\n    g.vertices.push(start, end);\n      os.add(new THREE.Line( g, m ));\n      os.name = \"line\";\n      os.start =  () => { return g.vertices[0]; }\n      os.end = () => { return g.vertices[1]; }\n      let sphere = new THREE.Mesh( new THREE.SphereGeometry( r, 16, 16 ), new THREE.MeshBasicMaterial( {color: 0xffffff * Math.random()} ) );\n      sphere.position.set(mid.x, mid.y, mid.z);\n      os.add(sphere);\n      return os;\n  }",
        "function StiltedTurtle(start, end) {\n    let g, c;\n    let m = new THREE.LineBasicMaterial({ color: 0x000000 });\n    g = new THREE.Geometry();\n    let mid = getPointInBetweenByLen(start, end, 0.5);\n    let d = end.distanceTo(start);\n    let r = 0.3 * d;\n    mid.add(new THREE.Vector3(getR(r), getR(r), getR(r)));\n    g.vertices.push(start, mid, end);\n      c = new THREE.Line( g, m );\n      c.name = \"line\";\n      c.start =  () => { return g.vertices[0]; }\n      c.end = () => { return g.vertices[2]; }\n      return c;\n  }"
    ],
    "rulesets": [
        "function RuleSetLine_2D_45Turn() {\n    this.run = (i, parent, turtle) =>   {\n                    let r = [];\n                    let c;\n                      let axis = new THREE.Vector3( 1, 0, 0 );\n                      let angle = Math.PI / 4;\n                      let src = parent.end().clone();\n                      let v1 = parent.end().clone().sub(parent.start());\n                      v1.applyAxisAngle( axis, angle );\n                      v1.multiplyScalar(0.5);\n                      let e1 = parent.end().clone().add(v1);\n                    c = new turtle(src, e1);\n                      r.push(c);\n                      let v2 = parent.end().clone().sub(parent.start());\n                      v2.applyAxisAngle( axis, -angle );\n                      v2.multiplyScalar(0.5);\n                      let e2 = parent.end().clone().add(v2);\n                    c = new turtle(src, e2);\n                      r.push(c);\n                    return r;\n                  }\n  }",
        "function RuleSetLine_3D_45Turn() {\n    this.run = (i, parent, turtle) =>   {\n                    let r = [];\n                    let c;\n                      let axis;\n                      axis = new THREE.Vector3( 1, 0, 0 )\n                      let angle = Math.PI / 4;\n                      let src = parent.end().clone();\n                      let v1 = parent.end().clone().sub(parent.start());\n                      v1.applyAxisAngle( axis, angle );\n                      v1.multiplyScalar(0.5);\n                      let e1 = parent.end().clone().add(v1);\n                    c = new turtle(src, e1);\n                      r.push(c);\n                      let v2 = parent.end().clone().sub(parent.start());\n                      v2.applyAxisAngle( axis, -angle );\n                      v2.multiplyScalar(0.5);\n                      let e2 = parent.end().clone().add(v2);\n                    c = new turtle(src, e2);\n                      r.push(c);\n                      axis = new THREE.Vector3( 0, 0, 1 );\n                      let v3 = parent.end().clone().sub(parent.start());\n                      v3.applyAxisAngle( axis, angle );\n                      v3.multiplyScalar(0.5);\n                      let e3 = parent.end().clone().add(v3);\n                    c = new turtle(src, e3);\n                      r.push(c);\n                      let v4 = parent.end().clone().sub(parent.start());\n                      v4.applyAxisAngle( axis, -angle );\n                      v4.multiplyScalar(0.5);\n                      let e4 = parent.end().clone().add(v4);\n                    c = new turtle(src, e4);\n                      r.push(c);\n                    return r;\n                  }\n  }",
        "function RuleSetLine_2D_23Turn() {\n    this.run = (i, parent, turtle) =>   {\n                    let r = [];\n                    let c;\n                      let axis = new THREE.Vector3( 1, 0, 0 );\n                      let angle = Math.PI / 8;\n                      let src = parent.end().clone();\n                      let v1 = parent.end().clone().sub(parent.start());\n                      v1.applyAxisAngle( axis, angle );\n                      v1.multiplyScalar(0.5);\n                      let e1 = parent.end().clone().add(v1);\n                    c = new turtle(src, e1);\n                      r.push(c);\n                      let v2 = parent.end().clone().sub(parent.start());\n                      v2.applyAxisAngle( axis, -angle );\n                      v2.multiplyScalar(0.5);\n                      let e2 = parent.end().clone().add(v2);\n                    c = new turtle(src, e2);\n                      r.push(c);\n                    return r;\n                  }\n  }"
    ],
    "name": "basic",
    "author": "turtle3d",
    "description": "Simple L system demo.",
    "created": {
        "$date": "2018-10-09T01:13:39.170Z"
    },
    "createdAt": {
        "$date": "2018-10-09T01:13:39.182Z"
    },
    "updatedAt": {
        "$date": "2018-10-09T01:13:39.182Z"
    },
    "__v": 0
}